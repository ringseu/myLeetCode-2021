/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if (!l1)
            return l2;
        if (!l2)
            return l1;

        ListNode *p1 = l1;
        ListNode *p2 = l2;
        ListNode *b1 = p1;
        ListNode *b2 = p2;
        ListNode *head = p1;

        int inc = 0;
        while (p1 && p2)
        {
            int tmp = p1->val + p2->val + inc;
            if (tmp >= 10)
            {
                inc = 1;
                tmp -= 10;
            }
            else
            {
                inc = 0;
            }
            p1->val = tmp;
            b1 = p1;
            b2 = p2;
            p1 = p1->next;
            p2 = p2->next;
        }

        if (p2 == NULL)
        {
            b2->next = p1;
            p2 = p1;
            while (p2 && inc)
            {
                int tmp = p2->val + inc;
                if (tmp >= 10)
                {
                    inc = 1;
                    tmp -= 10;
                }
                else
                {
                    inc = 0;
                }
                p2->val = tmp;
                b2 = p2;
                p2 = p2->next;
            }

            if (inc == 1)
            {
                ListNode *tail = new ListNode(1);
                b2->next = tail;
            }
        }

        if (p1 == NULL)
        {
            b1->next = p2;
            p1 = p2;
            while (p1 && inc)
            {
                int tmp = p1->val + inc;
                inc = 0;
                if (tmp >= 10)
                {
                    inc = 1;
                    tmp -= 10;
                }
                else
                {
                    inc = 0;
                }
                p1->val = tmp;
                b1 = p1;
                p1 = p1->next;
            }

            if (inc == 1)
            {
                ListNode *tail = new ListNode(1);
                b1->next = tail;
            }
        }

        return head;
    }
};
