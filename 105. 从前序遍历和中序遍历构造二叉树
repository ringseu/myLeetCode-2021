/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return foo(preorder, inorder, 0, preorder.size()-1, 0, inorder.size()-1);
    }

    TreeNode* foo(vector<int>& preorder, vector<int>& inorder, int pre_start, int pre_end, int in_start, int in_end)
    {
        if (pre_start > pre_end)
        {
            return NULL;
        }

        //前序遍历的首元素是根
        TreeNode *root = new TreeNode(preorder[pre_start]);

        //找到中序遍历中的根，左右两边就是左右子树
        int middle = 0;
        for (int i = in_start; i <= in_end; ++i)
        {
            if (inorder[i] == root->val)
            {
                middle = i;
                break;
            }
        }

        //递归地重建左右子树
        //求左右子树的长度
        int left_len = middle - in_start;
        int right_len = in_end - middle;
        root->left = foo(preorder, inorder, pre_start+1, pre_start+left_len, in_start, middle-1);
        root->right = foo(preorder, inorder, pre_start+left_len+1, pre_end, middle+1, in_end);

        return root;
    }
};
