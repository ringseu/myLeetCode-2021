/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if (!head || !head->next)
            return head;

        ListNode *before = NULL;
        ListNode *p1 = head;
        ListNode *p2 = p1->next;
        ListNode *after = p2->next;

        while (p1 && p2)
        {
            if (!before)
            {
                head = p2;
                head->next = p1;
                p1->next = after;
            }
            else
            {
                before->next = p2;
                p2->next = p1;
                p1->next = after;
            }

            before = p1;
            p1 = after;
            if (p1)
            {
                p2 = p1->next;
            }
            else
            {
                p2 = NULL;
            }
                
            if (p2)
            {
                after = p2->next;
            }
            else
            {
                after = NULL;
            }
        }

        if (after)
        {
            before->next = after;
        }

        return head;
    }
};
